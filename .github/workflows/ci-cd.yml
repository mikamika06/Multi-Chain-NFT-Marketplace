name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8.15.0'

jobs:
  lint:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Lint
        run: pnpm lint
      
      - name: Format check
        run: pnpm format

  test-api:
    name: Test API
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_DB: mcnft_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Generate Prisma Client
        working-directory: apps/api
        run: pnpm prisma:generate
      
      - name: Run migrations
        working-directory: apps/api
        run: pnpm prisma:migrate
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/mcnft_test
      
      - name: Run tests
        working-directory: apps/api
        run: pnpm test
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/mcnft_test
          REDIS_URL: redis://localhost:6379

  test-contracts:
    name: Test Smart Contracts
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
      
      - name: Run Forge build
        working-directory: contracts/evm
        run: forge build --sizes
      
      - name: Run Forge tests
        working-directory: contracts/evm
        run: forge test -vvv --gas-report
      
      - name: Run Slither
        uses: crytic/slither-action@v0.3.0
        continue-on-error: true
        with:
          target: contracts/evm/src/
          slither-args: --exclude-dependencies

  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [lint, test-api, test-contracts]
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push API image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: infra/api.Dockerfile
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/mcnft-api:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/mcnft-api:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build and push Web image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: infra/web.Dockerfile
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/mcnft-web:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/mcnft-web:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build and push AI image
        uses: docker/build-push-action@v5
        with:
          context: services/ai
          file: services/ai/Dockerfile
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/mcnft-ai:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/mcnft-ai:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.mcnft.market
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
      
      - name: Setup Helm
        uses: azure/setup-helm@v3
      
      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
          echo "KUBECONFIG=$(pwd)/kubeconfig" >> $GITHUB_ENV
      
      - name: Deploy with Helm
        run: |
          helm upgrade --install mcnft-staging infra/helm-chart \
            --namespace staging \
            --create-namespace \
            --set image.tag=${{ github.sha }} \
            --set environment=staging \
            --values infra/helm-chart/values-staging.yaml

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://mcnft.market
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
      
      - name: Setup Helm
        uses: azure/setup-helm@v3
      
      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
          echo "KUBECONFIG=$(pwd)/kubeconfig" >> $GITHUB_ENV
      
      - name: Deploy with Helm
        run: |
          helm upgrade --install mcnft infra/helm-chart \
            --namespace production \
            --create-namespace \
            --set image.tag=${{ github.sha }} \
            --set environment=production \
            --values infra/helm-chart/values-production.yaml \
            --wait \
            --timeout 10m
      
      - name: Notify Deployment
        if: always()
        uses: slackapi/slack-github-action@v1.27.0
        with:
          payload: |
            {
              "text": "Production deployment ${{ job.status }}",
              "attachments": [
                {
                  "color": "${{ job.status == 'success' && '#36a64f' || '#d93f0b' }}",
                  "fields": [
                    {
                      "title": "Environment",
                      "value": "production",
                      "short": true
                    },
                    {
                      "title": "Commit",
                      "value": "${{ github.sha }}",
                      "short": true
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
